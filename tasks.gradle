def versionPropsFile = file('version.properties')

task aPublishLibrary(type: Copy, dependsOn: "assembleRelease") {
    println("Copy the complete apk")
    from("$buildDir/outputs/aar") {
        include "*.aar"
    }
    into '../apks/'

    rename { String fileName ->
        fileName.replace(fileName, "${project.name}.${versions.isidroid}.aar")
    }

    // ${applicationId}.${variant.versionName}

    doLast {
        delete "$buildDir/outputs"
        delete "$buildDir/tmp"
        println("delete compiled data")
    }
}

task aPublishAll(type: Copy, dependsOn: "assembleRelease") {
    println("Copy the complete apk from $buildDir/outputs/apk/release")
    from("$buildDir/outputs/apk/release") {
        include "*.apk"
    }
    into '../apks'

    rename { String fileName ->
        fileName.replace(fileName, "${defaultConfig.applicationId}.${defaultConfig.versionName}.apk")
    }

    doLast {
        delete "$buildDir/outputs"
        delete "$buildDir/tmp"
        println("delete compiled data")
    }
}

/*Wrapping inside a method avoids auto incrementing on every gradle task run. Now it runs only when we build apk*/
ext.autoIncrementBuildNumber = {
    def versionBuild = 1
    Properties versionProps = new Properties()
    if (!versionPropsFile.exists()) versionPropsFile.createNewFile()
    else {
        versionProps.load(new FileInputStream(versionPropsFile))
        versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
    }

    versionProps['VERSION_BUILD'] = versionBuild.toString()
    versionProps.store(versionPropsFile.newWriter(), null)
}

// Hook to check if the release/debug task is among the tasks to be executed.
//Let's make use of it
gradle.taskGraph.whenReady { taskGraph ->
    taskGraph.allTasks.iterator().forEachRemaining { t ->
        def isAssemble = t.name.toLowerCase().contains("assemble")
        def isRelease = t.name.toLowerCase().contains("release")

        if (isAssemble && isRelease) autoIncrementBuildNumber()
    }
}