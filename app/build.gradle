apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion versions.compileSdk

    dataBinding {
        enabled = true
    }

    defaultConfig {
        applicationId "com.isidroid.a18"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.compileSdk
        def versionMajor = 1
        def versionMinor = 0
        def versionPatch = 0
        def versionBuild = 0

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild;
        versionName "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        setProperty("archivesBaseName", applicationId + "." + versionName)
    }

    signingConfigs {
        release {
            storeFile file(System.getenv("ISIDROID_KEYSTORE"))
            storePassword System.getenv("ISIDROID_KEYSTORE_PASSWORD") ?: 'UNSET'
            keyAlias System.getenv("ISIDROID_KEY_ALIAS") ?: 'UNSET'
            keyPassword System.getenv("ISIDROID_KEY_PASSWORD") ?: 'UNSET'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            ndk {
                abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a'
            }
        }

        debug {
            minifyEnabled false
            shrinkResources false
            debuggable true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    dexOptions {
        preDexLibraries = false
    }

    task aPublishAll(type: Copy, dependsOn: "assembleRelease") {
        println("Copy the complete apk from $buildDir/outputs/apk/release")
        from("$buildDir/outputs/apk/release") {
            include "*.apk"
        }
        into '../apks'

        rename { String fileName ->
            fileName.replace(fileName, "${defaultConfig.applicationId}.${defaultConfig.versionName}.apk")
        }

        doLast {
            delete "$buildDir/outputs"
            delete "$buildDir/tmp"
            println("delete compiled data")
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin"

    testImplementation "junit:junit:${versions.junit}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.espresso_core}"
// support
    implementation "androidx.core:core-ktx:${versions.androidx}"
    implementation "androidx.appcompat:appcompat:${versions.androidx}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraint}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle}"
    implementation "com.google.android.material:material:${versions.material}"
    implementation "android.arch.navigation:navigation-fragment-ktx:${versions.navigation}"
    implementation "android.arch.navigation:navigation-ui-ktx:${versions.navigation}"

// livedata
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-runtime:${versions.lifecycle}"
    kapt "androidx.lifecycle:lifecycle-compiler:${versions.lifecycle}"
// rx
    implementation "io.reactivex.rxjava2:rxandroid:${versions.rxAndroid}"
    implementation "io.reactivex.rxjava2:rxjava:${versions.rxJava}"
// di
    implementation "com.google.dagger:dagger-android:${versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"
// Retrofit
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${versions.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${versions.retrofit}"
    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp_logging_intercept}"
// Glide
    implementation("com.github.bumptech.glide:glide:${versions.glide}") {
        exclude group: "com.android.support"
    }
    kapt "com.github.bumptech.glide:compiler:${versions.glide}"
// Stuff
    implementation "com.google.code.gson:gson:${versions.gson}"
    implementation "com.karumi:dexter:${versions.dexter}"

// cores
    implementation project(':utils')
    implementation project(':logger')
    implementation project(':realm')
    implementation project(':pics')
}

//apply plugin: 'com.google.gms.google-services'

